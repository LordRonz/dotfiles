5/2+5/3+5/6
quit
help
help()
keywords
5/23
70/4+25/4+83/4+100/4
1+1
exit
1+1
bin(27)
hex(27)
oct(27)
dec(0x1b)
str(0x1b)
int(0x1b)
str(0x70)
int(0x70)
int{0x3D}
int{0x3d}
int(0x3d)
bin(42)
int(0o163)
print "Hello world"
print ("Hello world")
import pwn
pwn32.("0xDEADBEEF")
pwn32.(0xDEADBEEF)
pwnp32.(0xDEADBEEF)
pwn.p32(0xDEADBEEF)
import pwn
int(0x89)
hex(22)
str(0x45)
chr(0x45)
chr(0x27)
chr(0x74)
chr(0x25)
chr(0x264
chr(0x64)
chr(0x42)
chr(0x5a46)
chr(0x5a)
chr(_0x5a46)
chr(114)
chr(111)
chr(99)
chr(107)
chr(110)
chr(48)
chr(49)
chr(51)
chr(114)
2^10
256*256
256*256*256*256
256*256*256*256*256
3/5
3//5
8//3
int(19.9)
int(19.2)
1.79 % 0.1
0.79 % 0.1
0.79 % 1
10.34 % 0.1
pi
import math
pi
print pi
print (pi)
math.pi
round(1.79)
int(1.79)
190%30
190 % 30
190 // 30
chr(\x20)
chr(0x4b5b)
int(0x1234)
chr(0x21DD09EC)
str(0x21DD09EC)
int(0x21DD09EC)
hex(ㅤ)
hex('ㅤ')
int('A')
int(A)
chr(77)
"ㅤ".encode("int")
"ㅤ".encode("hex")
import codecs
"ㅤ".encode("hex")
codecs.encode(b"ㅤ", "int")
49 * 315
49 * 380
2 ** -3
import math
math.sqrt(256)
5 // 2
9 // 2 + 1
movies = ["When Harry Met Sally". "The Hangover", The Perks of Being a Wallflower", "The Exorcist"]
movies = ["When Harry Met Sally", "The Hangover", The Perks of Being a Wallflower", "The Exorcist"]
movies = ["When Harry Met Sally", "The Hangover", "The Perks of Being a Wallflower", "The Exorcist"]
person = ["Heath", "Bob", "Leah", "Jeff"]]
person = ["Heath", "Bob", "Leah", "Jeff"]
print(zip(movies, person))
zombined = zip(movies, person)
movie_dictionary = {key: value for key, value in zombined}
print (movie_dictionary)
True
import random
for i in range(5):
for i in range(5):; print(random.randint(1, 10));
for i in range(5): print(random.randint(1, 10))
'damn' in 'goddamn'
'fuck' in 'jesus fuckin christ'
history
word = 'Hello'
word.replace('ll', 'w')
13500/45
9.56*4
60/11
60/11*9.56
import math
cot(-1)
311/1.6
218/1.1
363/1.7
char(0x70)
str(0x70)
chr(0x70)
decode('hex')
import pwn
pwn.p32(0x400794)
pwn.p64(0x400794)
pwn.p32(0x400974)
pwn.p64(0x400974)
pwn.p32(0x40098e)
pwn.p64(0x40098e)
chr(0x7f)
str(0x7f)
chr(127)
chr(100)
chr(0x7f)
chr(0x7d)
'c6 bf 3e 0d 18 ee 5f 9a 64 9f 1f 38 a1 e6 b0 66 a2 0a 7b 85 92 4c de 13 28 02 46 db a3 23 8c 18 3a f0 c6 09 ee 86 6b f6 aa be a6 63 df c6 1f ab be 2e 16 64 c8 d7 28 3b 0a 0a 0a 0a 0a 0a 0a 0a 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 10 1010'.decode('hex')
int(CE)
int(0x7E)
int(0xCE)
int(0xc)
int('0xc')
int(hex(20))
int(hex(20)[2:])
import codecs
codecs.encode('foobar', 'rot_13')
'sbbone'
codecs.decode('sbbone', 'rot_13')
'426172626572735f62616c6d696e6573735f4d6163696173'.decode().hex()
import codecs
'426172626572735f62616c6d696e6573735f4d6163696173'.decode().hex()
bin(15)
ord(l)
ord('label')
ord(c)
ord('c')
bin(13)
int('0x13')
int(0x13)
13 ^ 14
7 ^ 5
5 ^ 2
bytes(1)
bytes(2)
bytes(3)
bytes(a)
message = 'mygoddamndick'
message[:5]
import PIL
from PIL import Image
import PIL
sqrt(4)
import math
sqrt(4)
math.sqrt(26513**2 + 32321**2)
32321-26513
26513//5808
26513-5808*4
5808-3281
3281-2527
2527//754
2527 - 2527//754 * 754
754-530
265*2
265-224
224//41
224%41
224//41 + 19
9%1
-5 % 6
-21 % 6
-6 % 6
-4 % 6
 % 6
5 % 6
-5 % 6
-7 % 6
11 // 6
1 mod 6
1 % 6
11%6
5%6
8146798528947 mod 17
8146798528947 % 17
import math
3 ** 17
(3 ** 17) % 17
(3 ** 1) % 17
(3 ** 16) % 17
(3 ** 17) % 17
(3 ** 18) % 17
(7 ** 18) % 1
(7 ** 17) % 17
(7 ** 16) % 17
1 % 11
s = 'B4CFD15E3329EC0BCFAE76F5FE2DC899C67879B918F80BD4BAB4D79E02520609F418934CD470D142A0291392735077F60489AC032CD6F106ABAD6CC0D9D5A6ABCACD5AD2562651E54B088AAFCC190F253490B02A29410F55F16B93DB9DB3CCDCECEBC75518D74225DE49351432929C1EC669E33CFBF49AF8FB8BC5E01B7EFD4F25BA3FE596579A2479491727D7894B6A2E0D8751D9233D068556F858310EEE81997868CD6E447EC9DA8C5A7B1CBF24402948D1039CEFDCAE2A5DF8F76AC7E9BCC5B059F695FC16CBD89CEDC3FC129093785A75B45683FAFC4184F6647934351CAC7A850E73787201E72489259EDA7F65BCAF8793198CDB7515B6E030C708F859'
int(s, 16)
pow(101, 17, 22663)
275-168
25%29
16 - 16 // 27
36 - 36 // 27
16 - (16 // 29) * 29
16 - (36 // 29) * 29
36 - (36 // 29) * 29
hex(900000000000000000000000000)
hex(90000003713712737819759710570175080737139818508307371070107)
a = hex(90000003713712737819759710570175080737139818508307371070107)
print(int(a, 16))
2 ** 63
2 ** 1000
2 ** 4
a = 5
b = 3
c = a > b
c
807 % 10
10 % 1
1999999999 + 1
9999999991 + 1
9999999991 + 9
2**63
2 ** 17
2 ** 16
8/2
8//2
p=29
ints = [14, 6, 11]
qr = [a for a in range(p) if pow(a,2,p) in ints]
qr
(21 ** 2) % 29
64 % 29
3%4
6**8
23**2
529 % 83
12 * 5400
5 * 240
1200/60
[3] * 3
[3] * 3 + [1]
[3] * 3 + [1] * 2
a = {}
a + 1
b = {2}
a += b
a = {3}
a 
a | b
a = {3, 4}
b = {2, 4}
a | b
s = {}
s.add(5)
s = set
s = set()
s
s.add(5)
s
*a
*[a]
print(*[a])
import numpy as np
np.identity(6)
1/16
a = {'a':'test'}
a
a['a'] = 1
a
a[1]
a["ja"] = 5
a
b, c = [2, 4]
b
c
d = {}
for _ in range(int(input())):
    a, b = input().split()
    d[a] = d.get(a, 0) + int(b)
d = dict(sorted(d.items(), key=lambda item: item[0]))
for key, value in d:
z = [*a]
z
z = [*a][0]
z
a[0]
a.items()[0]
a.items()
'Ambar' > 'Babi'
'Bmbar' > 'Babi'
max(a)
a['a'] = 8
max(a)
from matplotlib import pyplot as plt
c = (4, 6, 8)
c == (4, 8, 6)
{1, 2} == {2, 1}
(4 + 2 + 2 + 13) / 8
"Kontol"[:-1]
pow(2, 52 // 2, 53)
pow(2, 52 // 2, 53) == -1
pow(3, 136 // 2, 137) == -1
pow(3, 136 // 2, 137)
for i in range(10):
	print(1)
print(i)
pow(2, 5)
-3 % 4
-3 % 7
-3 % 1000
4 ** -.5
4 ** 0.5
import matplotlib
11 * 17 *5
11 * 17
2*187*3
3 * 85
5 * 55 *4
1100+1172+255
2527% 935
918%280
5 * 17
3 * 85 * 4
1100 + 1172 + 1020
3292 % 935
 52 % 17
52 % 17
5 * 55 * 13
1172+1020+3575
5767%935
32 % 11
2 * 187 * 3
(2 * 187 * 3 + 3 * 85 * 7 + 5 * 55 * 13) % 935
4097 // 2
4097 // 4096
4095 // 4096
4096 // 4096
4095 % 4096
1 % 4096
"big" > "small"
11 % 5
"" is False
"" == False
"" == True
5/4
(5 / 5) - 5 % 5
(5 / 5) - (5 % 5)
(5 / 5) - (5 // 5)
0 / 5
chr(27)
chr(int('0x27'))
chr(int('0x27', 16))
while year < 50:
	year += 10
wardrobe = {'shirt': ['red', 'blue', 'white'], 'jeans': ['blue', 'black']}
new_items = {'jeans': ['white'], 'scarf': ['yellow'], 'socks': ['black', 'brown']}
wardrobe.update(new_items)
wardrobe
ord('\n')
b'\n'
b'0x10'
chr(10)
for i in range(100):
	print(chr(i))
for i in range(100):
	print(i, chr(i), sep=",")
animal = "Hippopotamus"
animal[3:6]
animal[-5]
animal[10:]
colors = ["red", "white", "blue"]
colors.insert(2, "yellow")
colors
a = {*()}
type(a)
a
a = "kntl"
"k" in a
"c" in a
import sockey
import socket
import math
math.exp()
math.exp(2)
math.exp(1)
math.exp(0)
math.exp(10000)
math.exp(1000)
math.exp(100)
math.exp(-4)
math.exp(-5) 
math.exp(-4) + math.exp(-4)*0.5
math.exp(-4) + math.exp(-4)*0.5 + math.exp(-4)*pow(0.5, 2)
math.exp(-4) + math.exp(-4)*0.5 + math.exp(-4)*pow(0.5, 2) + math.exp(-4) * pow(0.5, 3)
math.exp(-4) + pow(-2, 1)*math.exp(-4)*0.5 + pow(-2, 2)* math.exp(-4)*pow(0.5, 2) + pow(-2, 3)math.exp(-4) * pow(0.5, 3)
math.exp(-4) + pow(-2, 1)*math.exp(-4)*0.5 + pow(-2, 2)* math.exp(-4)*pow(0.5, 2) + pow(-2, 3) *math.exp(-4) * pow(0.5, 3)
pow(-2,2)
pow(-2,3)
for i in range(4):
import math
a = 0
for i in range(10):
	a += pow(-2, i) * math.exp(-4) * pow(0.5, i) / math.factorial(i)
print(a)
math.factorial(1)
math.factorial(0)
(0.833 - 0.693) / 0.693
(0.000045 - 0.00673) / 0.00673 * 100
fact(7)
import math
math.factorial(7)
abs(-5)
(1 - 0.693) / 0.693
(1 - 0.693) / 0.693 * 100
(2 - 0.693) / 0.693 * 100
math.exp(-5)
math.exp(1)
math.e
math.pi
math.exp(500)
a = (2, 4, 5)
2 * a
a * 2
a = tuple((2 * c for c in a))
a
math.e
import math
math.e
str(5)
copyright
(8+5+6+3+6+6) / 8
from random import randint
randint(1, 100000000000000000)
randint(1, 100000)
seed(19)
from random import seed
seed(10)
randint(1, 100000)
seed(10)
randint(1, 100000)
import matplotlib
import matplotlib.pyplot as plt
plt.plot([1, 2, 3, 4], [16, 4, 1, 8])
plt.show()
4*0.0028
0.0035*3
0.2136*2
2 ** 31 - 1
import scipy
def f(a, b):
	return abs((b-a)/ (b + a))
f(0.875, 0.890625)
def f(a, b):
return abs((b-a)/ (b + a))
f(-.875, 0.890625)
f(0.875, 0.890625)
f(0.875, 0.890625) * 100
f(0.875, 0.90625) * 100
0.5 - 0.3544/0.1275
21*60
ord('a')
ord('A')
15000 - 15000/10
15000 - 15000*.1 - 2*15000*0.03 - 15000*.002
15000 - 15000*.1 - 2*13500*0.03
15500 - 15500 * 0.1
15500 - 15500 * 0.1 - 2 * 13950*0.03
15500 - 15500 * 0.1 - 2 * 13950*0.03 - 13113*0.002
15500 - 15500 * 0.1 - 2 * 15500*0.03 - 15500*0.002
15500 - 15500 * 0.1 - 2 * 15500*0.03 - 15000*0.002
15500 - 15500 * 0.1 - 2 * 15000*0.03 - 15000*0.002
15500 - 15500 * 0.1 - 3 * 13950*0.03
15500 - 15500 * 0.1 - 2 * 13950*0.03
15500 - 15500 * 0.1 - 2 * 13950*0.03 - 13113*0.002
15500 - 15500 * 0.1 - 2 * 13950*0.03 - 213113*0.002
15500 - 15500 * 0.1 - 2 * 13950*0.03 - 2*13113*0.002
15500 - 15500 * 0.1 - 13950*0.03
15500 - 15500 * 0.1 - 13950*0.03 - 13531.5*0.03
15500 - 15500 * 0.1 - 13950*0.03 - 13531.5*0.03 - 13125.555*0.002
15500 - 15500 * 0.1 - 13950*0.03 - 13531.5*0.03 - 13125.555*0.002 - 13099.30389 * 0.002
32400 - 32400*0.2
32400 - 32400*0.2 - 25920 * 0.05
32400 - 32400*0.2 - 25920 * 0.05 - 24624*0.05
30000-7200
30000/60
ord('A')
def test1():
	for i in range(10000):
import timeit
def test1():
	a = ""
test1 = '''
def test1():
	a = ""
	for i in range(10000):
		a += '+'
'''
test2 = '''
def test2():
	a = ""
	for i in range(10000):
		a = ''.join([a, '+'])
'''
print(timeit.timeit(stmt = test1))
print(timeit.timeit(stmt = test2))
print(timeit.timeit(stmt = test2, number 100000))
print(timeit.timeit(stmt = test2, number=100000))
print(timeit.timeit(stmt = test1, number=100000))
print(timeit.timeit(stmt = test1, number=10000000))
print(timeit.timeit(stmt = test2, number=10000000))
test3 = '''
def test3():
	a = ""
	for i in range(10000):
		a = f"a{'+'}"
'''
print(timeit.timeit(stmt = test3, number=10000000))
test4 = '''
def test4():
	a = []
	b = ""
	for i in range(10000):
		a.append('+')
	b = ''.join(a)
'''
print(timeit.timeit(stmt = test4, number=10000000))
def test5():
	a = ""
	for i in range(10000):
		a = a + '+'
'''
test5 = '''
def test5():
	a = ""
	for i in range(10000):
		a = a + '+'
'''
print(timeit.timeit(stmt = test5, number=10000000))
print(timeit.timeit(stmt = test1, number=10000000))
print(timeit.timeit(stmt = test5, number=10000000))
print(timeit.timeit(stmt = test3, number=10000000))
print(timeit.timeit(stmt = test2, number=10000000))
print(timeit.timeit(stmt = test3, number=10000000))
test6 = '''
def test():
	a = []
	for i in range(10000):
		a.append(i)
'''
test7 = '''
def test():
	a = []
	for i in range(10000):
		a.extend([i])
'''
print(timeit.timeit(stmt = test6, number=10000000))
print(timeit.timeit(stmt = test7, number=10000000))
print(timeit.timeit(stmt = test7, number=1000000))
print(timeit.timeit(stmt = test6, number=1000000))
test8 = '''
def test():
	a = []
	for i in range(10000):
		a += [i]
'''
a = []
a += i
a += 1
a += [1]
a
print(timeit.timeit(stmt = test8, number=1000000))
print(timeit.timeit(stmt = test7, number=1000000))
print(timeit.timeit(stmt = test8, number=1000000))
print(timeit.timeit(stmt = test8, number=10000000))
print(timeit.timeit(stmt = test7, number=10000000))
print(timeit.timeit(stmt = test6, number=10000000))
test1 = '''
def test():
	a = []
	for i in range(1000000):
		a.append()
'''
test2 = '''
def test():
	a = []
	for i in range(1000000):
		a.extend([i])
'''
test1 = '''
def test():
	a = []
	for i in range(1000000):
		a.append(i)
'''
test3 = '''
def test():
	a = []
	a = [i for i in range(1000000)]
'''
print(timeit.timeit(stmt = test1))
print(timeit.timeit(stmt = test2))
print(timeit.timeit(stmt = test3))
def test():
test4 = '''
def test():
	for i in range(100000):
		for j in range(10000):
			a = 1 + a
'''
print(timeit.timeit(stmt = test4))
test4 = '''
def test():
	a = []
	for i in range(100000):
		for j in range(10000):
			a.append(j)
'''
print(timeit.timeit(stmt = test4))
print(timeit.timeit(stmt = test4, number=1))
timeit(test4)
timeit.timeit(test4)
test1 = '''
a = list(range(10000000))
'''
test2 = '''
a = [*range(10000000)]
'''
a = [*range(10)]
a
timeit.timeit(test1)
timeit.timeit(test1, number = 100)
timeit.timeit(test1, number = 1)
timeit.timeit(test2, number = 1)
timeit.timeit(test2, number = 10)
timeit.timeit(test1, number = 10)
timeit.timeit(test2, number = 10)
test1 = '''
a = []
for i in range(10000):
test1 = '''
a = ""
for i in range(10000):
	a += '+'
'''
test2 = '''
a = ""
for i in range(10000):
	a = ''join([a, '+'])
'''
test3 = '''
a = ""
for i in range(10000):
	a = f'a{"+"}'
'''
timeit.timeit(test1)
timeit.timeit(test1, number = 10)
timeit.timeit(test1, number = 1000)
timeit.timeit(test2, number = 1000)
test2 = '''
a = ""
for i in range(10000):
	a = ''.join([a, '+'])
'''
timeit.timeit(test2, number = 1000)
timeit.timeit(test1, number = 1000)
timeit.timeit(test3, number = 1000)
timeit.timeit(test1, number = 1000)
timeit.timeit(test1, number = 10000)
timeit.timeit(test3, number = 10000)
test1 = '''
a = []
for i in range(10000):
	a.append(i)
'''
test2 = '''
a = []
for i in range(10000):
	a.extend([i])
'''
test3 = '''
a = []
for i in range(10000):
	a += [i]
'''
timeit.timeit(test1, number=100)
timeit.timeit(test1, number=1000)
timeit.timeit(test2, number=1000)
timeit.timeit(test1, number=1000)
timeit.timeit(test3, number=1000)
test4 = '''
a = []
a = [i for i in range(10000)]
'''
test5 = '''
a = []
a = map(list, range(10000))
'''
a = []
a = map(list, range(10))
a
a = [a]
a
a = list(a)
a
test5 = '''
timeit.timeit(test4, number=1000)
timeit.timeit(test3, number=1000)
timeit.timeit(test2, number=1000)
timeit.timeit(test1, number=1000)
timeit.timeit(test4, number=1000)
test1 = '''
a = ""
for i in range(10000):
	a += 'X'
'''
test2 = '''
a = ""
for i in range(10000):
	a = a + 'X' 
'''
timeit.timeit(test1, number=100)
timeit.timeit(test1, number=1000)
timeit.timeit(test2, number=1000)
timeit.timeit(test1, number=100)
timeit.timeit(test1, number=1000)
test1 = '''
a = list(range(10000))
if 9999 in list:
test1 = '''
a = list(range(100000))
b = 9999
if b in a:
	print('Yes')
'''
test2 = '''
a = set(range(100000))
b = 9999
if b in a:
	print('Yes')
'''
timeit.timeit(test1, number=1000)
print(timeit.timeit(test1, number=1000))
print(timeit.timeit(stmt = test1, number=1000))
test1 = '''
a = list(range(100000))
'''
test2 = '''
a = {*range(100000)}
'''
timeit,timeit(test1, 1000)
timeit,timeit(test1, number=1000)
timeit.timeit(test1, number=1000)
timeit.timeit(test2, number=1000)
test1 = '''
a = list(range(100000))
if 99999 in a:
	b = 1
'''
test2 = '''
a = set(range(100000))
if 99999 in a:
	b = 1
'''
timeit.timeit(test1)
timeit.timeit(test1, number = 1000)
timeit.timeit(test2, number = 1000)
timeit.timeit(test2, number = 10000)
timeit.timeit(test1, number = 10000)
test3 = '''
a = tuple(range(100000))
if 99999 in a:
	b = 1
'''
timeit.timeit(test3, number = 10000)
test4 = '''
a = list(range(1000000))
'''
test5 = '''
a = [*range(1000000)]
'''
timeit.timeit(test4, number = 1000)
timeit.timeit(test4, number = 100)
timeit.timeit(test5, number = 100)
timeit.timeit(test4, number = 100)
test6 = '''
a = tuple(1000000)
'''
test7 = '''
timeit.timeit(test6, number = 100)
test6 = '''
a = tuple(range(1000000))
'''
timeit.timeit(test6, number = 100)
timeit.timeit(test4, number = 100)
timeit.timeit(test6, number = 100)
timeit.timeit(test5, number = 100)
test7 = '''
a = {*range(1000000)}
'''
timeit.timeit(test7, number = 100)
test1 = '''
a = []
b = a.append
for i in range(10000):
	b(i)
'''
test2 = '''
a = []
for i in range(10000):
	a.append(i)
'''
timeit.timeit(test1, number=100)
timeit.timeit(test1, number=1000)
timeit.timeit(test2, number=1000)
timeit.timeit(test1, number=1000)
timeit.timeit(test1, number=10000)
timeit.timeit(test2, number=10000)
timeit.timeit(test1, number=1000)
timeit.timeit(test2, number=1000)
timeit.timeit(test1, number=1000)
timeit.timeit(test2, number=1000)
500 // 3
500 - 162*2
500 - 2
500 // 2
500 - 3 * 166
500 % 3
100000*3
281 / 1.4
218 / 1.1
311/1.6
ord('c')
ord('A')
5 & 1
6 & 1
import timeit
timeit.timeit('for i in range(100): a[i]', 'a = list(range(100))')
timeit.timeit('for i, o in enumerate(a): o', 'a = list(range(100))')
timeit.timeit('for i in range(100): a[i] + 1', 'a = list(range(100))')
timeit.timeit('for i, o in enumerate(a): o + 1', 'a = list(range(100))')
a = "Kuwa Kuwi"
for i in range(len(a), -1, -1):
	print(a[i])
for i in range(len(a), 0, -1):
	print(a[i])
a = "Anjing"
for i in range(len(a)):
	print(a[i])
for i in range(len(a), -1, -1):
	print(a[i])
for i in range(len(a) - 1, -1, -1):
	print(a[i])
for i, c in enumerate(reversed(a)):
	print(c)
timeit.timeit('for i, o in enumerate(a): o', 'a = ''.join(range(100))')
timeit.timeit('for i, o in enumerate(a): o', 'a = "".join(range(100))')
timeit.timeit('for i, o in enumerate(a): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i in range(len(a)): a[i]', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i, o in enumerate(a): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i in range(len(a) - 1, -1, -1): a[i]', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i, o in enumerate(reversed(a)): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i, o in enumerate(a[::-1]): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i, o in enumerate(a[::-1]): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i in range(len(a - 1), -1, -1): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i in range(len(a - 1), -1, -1): a[i]', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i in range(len(a) - 1, -1, -1): a[i]', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
for i, b in reversed(enumerate(a)):
	print(b)
for i, b in enumerate(reversed(a)):
	print(i)
c = zip(range(100))
c
for i in c:
	print(i)
c = zip(100)
timeit.timeit('for i in range(len(a) - 1, -1, -1): a[i]', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
timeit.timeit('for i, o in enumerate(reversed(a)): o', 'a = "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"')
for i in reversed(range(1, 5)):
	print(i)
a = reversed(range(10))
a
for i in a:
	print(i)
a = "abcdefghijkkl"
for i, c in reversed(enumerate(a)):
	print(i, c)
a = [0] * 7
a[1]
a[1] = 5
a
import dis
def while_one()L
def while_one():
	while 1:
	    pass
def while_true():
	while True:
	    pass
dis.dis(while_one)
dis.dis(while_true)
True + True
import numpy
import rsa
ls
import pwntools
import pwn
200/3
150 / 4
a = [[1, 3, 4, 5], [7, 8, 9]]
a.find(9)
a.index(9)
b = (a.index(9) for i in a)
b
b = [a.index(9) for i in a]
a = [[] * 2] * 4
a
a[0][0] = 5
a[0].append(5)
a
a = [[] for i in range(4)]
a
a[0].append(1)
a
a[3].append(69)
a
a = [[0] * 5] * 5
a
a[0][1] = 7
a
a = [[0] * 5 for i in range(7)]
a
a = [[0] * 5 for i in range(7)]
a[0][1] = 69
a
a = []
if a:
	print("Kontol")
a
if not a:
	print("Kontol")
a, b = [1, 5]
a
b
from collections import deque
Q = deque([5, 8])
q
Q
Q = deque([[5, 8]])
Q
a = Q.pop()
a
Q = deque([[1, 2]])
from collections import deque
Q = deque([[1, 2]])
Q.append([2, 5])
Q
a, b = Q.popleft()
a
b
import sys
a = sys.stdin.readline()
a
a = input()
fjaj
a
a = sys.stdin.readline()[:-1]
a
sys.stdout("kontol")
sys.stdout.write("kontol")
sys.stdout.write("kontol\n")
sys.stdout.write("kontol")
a = stdin.read()
a = sys.stdin.read()
a
a = sys.stdin.read(1)
a
test = '''
def 
'''
a = 'kontol\n'
a
a.strip()
a
timeit('"abcdefghijklmnopqrstuvwxyz\n".strip()')
from timeit import timeit
timeit('"abcdefghijklmnopqrstuvwxyz\n".strip()')
timeit('"abcdefghijklmnopqrstuvwxyz".strip()')
timeit('"abcdefghijklmnopqrstuvwxyz  \\n ".strip()')
timeit('"abcdefghijklmnopqrstuvwxyz  \n ".strip()')
timeit('"abcdefghijklmnopqrstuvwxyz\n".strip(\n)')
timeit('"abcdefghijklmnopqrstuvwxyz\\n".strip(\n)')
a = '\\n'
a
a = '\n'
a
print(a)
timeit('"abcdefghijklmnopqrstuvwxyz\\n".strip(\n)')
sys.stdout.write("kontol")
sys.stdout.write("kontol""\n")
inf
import math
math.inf
inf
-inf
math.inf - 99999
math.inf * 0
nan
math.nan
ord('a')
ord('z')
math.log(1/240)
math.log(1/240) / math.log(12/7)
math.log(1/240) / math.log(12/7) * 600
math.log(1/240) / math.log(7/12) * 600
math.log(1/240, 7/12)
math.log(1/240, 7/12) * 600
int(0xACCE97ED)
int(0x8)
1e-5
a = 1e-5
a
print(a)
a * 1000
a = []
a.extend([5, 8, 3])
a
a.extend([[5, 8, 3]])
a
try:
	import flask
except ImportError:
	print("Kontol")
try:
	import flask
except ImportError:
	pass
float('nan')
a = float('nan')
type(a)
import math
a = math.nan
a
type(a)
a = 1e-5
a
type(a)
a == 0.00001
print({4.440892098500626e-16:.8f})
print({4.440892098500626e-16.8f})
print({4.440892098500626e-16:8f})
print({4.440892098500626e-16}.8f)
print(f'{4.440892098500626e-16:.8f}')
print(f'{4.440892098500626e-16:8f}')
print(f'{4.440892098500626e-16:.16f}')
print(f'{4.440892098500626e-16:.20f}')
print(f'{4.440892098500626e-16:.30f}')
print(f'{4.440892098500626e-16:.40f}')
print(f'{4.440892098500626e-16:.100f}')
a = [2,3,4,5,6]
b = a[1:2]
a
b
b = a[1:3]
b
a = 7.8239
type(a)
b = str(a)
b
5/9 * (76 - 32)
117*3
117*81
117*89
117*19
1050 // 117
230 // 237
13 // 2
1050 // 117
1050 / 117
117 - 3
117 % 10
18 - 4
14 // 10
18.3 % 10
18.3 % 1
a = r'\t\n'
a
print(a)
bin(2**10)
len(bin(2**10))
13 / 5
13 // 5
2 ** 1 + 2 ** 7 + 2 ** 8 + 2 ** 2 - 2 ** 3 - 2 ** 4- 2 ** 5 - 2 ** 6
2 ** 1 + 2 ** 8 + 2 ** 2 - 2 ** 3 - 2 ** 4- 2 ** 5 - 2 ** 6 - 2 ** 7
2 ** 1 + 2 ** 7 + 2 ** 8 + 2 ** 2 - 2 ** 3 - 2 ** 4- 2 ** 5 - 2 ** 6
2 ** 1 + 2 ** 7 + 2 ** 8 + 2 ** 2 + 2 ** 3 + 2 ** 4 +  2 ** 5 + 2 ** 6
2 ** 1
2 ** 3  + 2 ** 4 + 2 ** 5 + 2 ** 6
2 ** 1 + 2 ** 2 + 2 ** 7 + 2 ** 8
2 ** 1 + 2 ** 6 + 2 ** 8 + 2 ** 2 - 2 ** 3 - 2 ** 4- 2 ** 5 - 2 ** 7
2 ** 1 + 2 ** 2 + 2 ** 3 + 2 ** 8
2 ** 1 + 2 ** 2 + 2 ** 3 + 2 ** 8 - 2 ** 4 - 2 ** 5 - 2 ** 6- 2 ** 7
2 ^ 2
2 ^ 2 ^ 3
2 ^ 2 ^ 2
0 ^ 2
help
help()
quit
0.79375 / 2
import sympy
1/7
(1/7)**0.5
from decimal import *
getcontext().prec
from sklearn.linear_model import LinearRegression
234 * 159
234 * 234
11 * 6262
11 * 6262 - 54756
11 *2380 - 37206
11026 / 14126
(159 - 0.78054*234) / 11
(159 + 0.78054*234) / 11
19 * 60
499993 * 8
2 ** 64
2 << 3
64 + 48
136 % 8
112 / 8
int('0x0f')
int('0x0f', 16)
int('10110101', 2)
181 & 15
bin(15)
53 - 14
240 + 480
720 / 9
1280 / 16
0.6 * 200
1280 - 12
1280 - 120
2 ** 8
2 ** 3
2 ** 5
2 ** 4
97 // 7
13 // 7
97 + 97 // 7
97 + 97 // 7 + 97 // 7 // 7
7 // 3
97 // 7 + 97 % 7
19 // 7
97 + 97 // 7 + (97 // 7 + 97 % 7) // 7
97 // 7
97 % 7
19 // 7
1000000000 + 1000000000 // 2
1000000000 + 1000000000 // 2 + 1000000000 // 2 // 2 + 1000000000 // 2 // 2 // 2
1000000000 + 1000000000 // 2 + 1000000000 // 2 // 2 + 1000000000 // 2 // 2 // 2 + 1000000000 //2//2//2//2
1000000000 + 1000000000 // 2 + 1000000000 // 2 // 2 + 1000000000 // 2 // 2 // 2 + 1000000000 //2//2//2//2 + 1000000000 //2//2//2//2//2
97 // 7
110 // 7
97 + 97 // 7 + 97 // 7 // 7
97 + 97 // 7 + 97 // 7 // 7 + 97 // 7 // 7
97 + 97 // 7 + 97 // 7 // 7 + 97 // 7 // 7 // 7
8 << 1
7 << 1
bin(42)
0 & 0
~0 & ~0
!0 & !0
!0 & not 0
not0 & not 0
not 0 & not 0
473 * 2
472 * 2
13 // 3
12 // 3
1.5 ** 4
24 * 32
24 * 32 * 4
import math
math.log(8)
math.log(8.1)
ord('z') - ord('e')
ord('e') - ord('u')
ord('u') - ord('s')
ord('z') - ord('a')
ord('a') - ord('z')
ord('u') - ord('e')
ord('z') + ord('a') - ord('z') - ord('a')
ord('z') + ord('z') - ord('e') - ord('a')
ord('e') - ord('a')
ord('z') + ord('e') - ord('a') - ord('z')
ord('e') - ord('a')
2.5 * 14
6 / 0.4
 6 / 0.5
6 / 0.5
1/ 0.7
-7 / 0.8
-3 / 0.9
1-42 - 12
1.42 - 12
(1.42 - 12) / 1.2
(-8.75 - 1.42) / (4 - 2.5)
(-12 + 8.75) / (4.5 - 3.2)
(-3.33 + 8.81) / 3.2 - 1.6
2 + 15 * (2.8 - 1.6) - 3.33 * (2.8 - 1.6) * (2.8 - 2) + 0.1125 * (2.8 - 1.6) * (2.8 - 2) * (2.8 - 2.5)
2 * (2.8 - 2) * (2.8 - 2.5) * (2.8 - 3.2) / ((1.6 - 2) * (1.6 - 2.5) * (1.6 - 3.2))
8 * (2.8 - 1.6) * (2.8 - 2.5) * (2.8 - 3.2) / ((2 - 1.6) * (2 - 2.5) * (2 - 3.2))
14 * (2.8 - 1.6) * (2.8 - 2) * (2.8 - 3.2) / ((2.5 - 1.6) * (2.5 - 2) * (2.5 - 3.2))
15 * (2.8 - 1.6) * (2.8 - 2) * (2.8 - 2.5) / ((3.2 - 1.6) * (3.2 - 2) * (3.2 - 2.5))
0.3333333333333334 + -4.800000000000001 + 17.06666666666667 + 3.21428571428571
(-8.81 + 3.33) / 3.2 - 1.6
(-8.81 + 3.33) / (3.2 - 1.6)
 2 + 15 * (2.8 - 1.6) - 3.33 * (2.8 - 1.6) * (2.8 - 2) -3.425 * (2.8 - 1.6) * (2.8 - 2) * (2.8 - 2.5)
2 + 15 * (2.8 - 1.6) - 3.33 * (2.8 - 1.6) * (2.8 - 2) - 3.425 * (2.8 - 1.6) * (2.8 - 2) * (2.8 - 2.5)
429 / 7
429 / 3
True + True
bin(4)
bin(69)
bin(69)[2:]
69 ^ 1
bin(68)[2:]
68 ^ 1
2 ** 32
2 ** 31
- 2 ** 31
14 * 4 + 8 * 3.5
84 / 22
14 * 4 + 5 * 3.5 + 9
82.5 / 22
15.6 / 100
6789 % 6
67896 % 6
789 % 7
789 % 8
789 % 9
7897 % 7'
7897 % 7
7897 % 8
7897 % 9
78978 % 7
78978 % 8
78978 % 9
789789
789789 % 7
737 % 7
737 % 3
7373 % 7
7373 % 3
73737 % 7
73737 % 3
23333333 % 3
233333333 % 3
2333333333 % 3
23333333333 % 3
16 / 1400
1400 / 16
1400 / 18
1400 / 87
1200 * 9 / 16
11 * 8
12 * 7
12 * 6
11 * 7
1000000000 - 1000000000
1920 / 192
192 / 8
108 / 8
192 / 6
108 / 6
960 / 16
540 / 9
10 * 16
70 * 16
80 * 16
70 * 9
960 / 16
70 * 16
65 * 16
65 * 9
70 * 9
19823 // 100
19823 % 100
98 + 23
24 // 10
24 % 10
11 % 10
int('a')
chr(85)
chr(65)
int('a')
ord('AZ')
ord('A')
ord('a')
ord('z')
ord('Z')
78 % 10
73 // 10
38 // 10
969 * 2
88888 * 
88888 * 8
21112 * 2
155 * 55
27 * 6
162 / 3
2 ** 64
2 ** 42
1918 % 4
14000 / 67
67 / 14000
8100 / 20
1 / 405
(300000 * 299999) // 2
2 ** 32
2 * 10 **9 
(10000 * 9999) // 2
(100000 * 99999) // 2
ls
import lxml
ls
from bs4 import BeautifulSoup
strs = [1019676572,"Nibbas",null,0,[[1810931148,
strs = '[1019676572,"Nibbas",null,0,[[1810931148,'
strs.split(,)
strs.split(',')
'0'.isdigit()
'10'.isdigit()
'10 '.isdigit()
'10 '.strip().isdigit()
import requests
html = requests.get('google.com')
244 - 191
import requests
html = requests.get('https://forms.gle/WvinaXokufTmpDhj9')
html.text
html.status_code
import requests
html = requests.get('google.com')
517 - 40
111 // 10
111 // 5
i = 1
while True:
	if i % 0O7 == 0:
		break
	print(i)
	i+= 1
import docx
import pyautogui
import tkinter
import pandas as pd
d = {}
d['A'] = 5
d
d['A'] = 8
d
b = d['A']
b = 10
d
77 * 5
7 % 19
17 % 7
21 % 7
20 % 7
9 % 3
2 * 5000
2 ** 5000
5000 ** 2
ord('l')
5 / 3
2 / 5
import numpy
import requests
import request
import requests
import request
import pandas
import requests
import pandas
import sys
sys.path
70.2 / 12
gcd(384, 482)
import math
math.gcd(384, 482)
17 / 2600
17 / 2600 * 100
test = []
test = {'aku': 1, 'kowe': 4}
test.aku
test.get('aky')
test.get('aku')
test['aku']
test['aky']
a = {test}
a = {'test': test}
a.test
import math
math.sin(27)
math.sin(37)
8 //7 
8 // 1
6 // 10
999999733 // 999999732
999999733 // 9999997323
999999733 // 999999733
math.gcd(999999733, 999999732)
math.sqrt(10** 9)
import os
os.environ['SECRET_KEY']
import os
os.environ['SECRET_KEY']
import pandas
os.getenv('SECRET_KEY')
Path(__file__).resolve().parent.parent
from pathlib import Path
Path(__file__).resolve().parent.parent
from pathlib import Path
Path(__file__).resolve().parent.parent
from manage import read_env
read_env()
os.environ['SECRET_KEY']
import os
os.environ['SECRET_KEY']
import os
os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
import Path
from pathlib import Path
Path('.').resolve().parent.parent
Path('.').resolve().parent.parent / 'db.sqlite3'
import pandas
2 ** 8
django --version
704 / 16
bytes('hello', 'utf-8')
import random
a = ['a', 'b', 'c']
random.shuffle(a)
a
    print("Server started http://%s:%s)
1266673 / 38915
1 / 32
1 / 32 * 100
10 ** 9
[](const string& s1, const string& s2){
            if (s1.length() < s2.length())
                return true;
            if (s2.length() < s1.length())
                return false;
            else
                return (s1 < s2);
1010345410
10 ** 9
600010000
1350015000
324 - 36
288 ** 0.5
6 * 8 ** 0.5
36 * 8
288 - 324
216 / 36
ord('z')
2 % 
2 % 4
2 ** 32
2 ** 64
1000000000 ** 2
[8, 3, 69, 1, 22].sort()
a = [8, 3, 69, 1, 22].sort()
a
sorted([8, 3, 69, 1, 22])
a = [(8, 3, 430, 69, 1, 22)
a = (8, 3, 430, 69, 1, 22)
a.sort()
sorted(a)
import secret
import secrets
secrets.token_urlsafe(32)
secrets.token_urlsafe(64)
secrets.token_urlsafe()
secrets.token_urlsafe(64)
secrets.token_bytes().decode()
secrets.token_bytes().decode('utf-8')
260586 * 4 + 150000
import string
string.ascii_letters
string.digits
string.punctuation
string.ascii_letters * 2
import os
os.urandom(16)
int.from_bytes(os.urandom(20), byteorder="big")
int.from_bytes(os.urandom(16), byteorder="big")
import pyautogui
pyautogui.position
pyautogui.position()
9.69 * 4
557068 + 150000
9.69 * 5
696191 + 150000
557068 / 4
1040 / 1080
603 / 1920
import pyautogui
pyautogui.size()
width, height = pyautogui.size()
width
height
0.3140625 * 1920
0.962 * 1080
863 - 836
470 - 464
473 * 2
sum(range(1, 11))
sum(range(1, 10))
sum(range(1, 5))
2 + 2 * 1.4142
2 * 5 ** 0.5
3 * 1.4142
import rdig_hanskuy
from rdig_hanskuy import *
to_1scomp(bin(878))
to_1scomp(bin(878, 2))
bin(878)
to_1scomp(bin(878)[2:])
to_2scomp(bin(878)[2:])
bin('0x36e', 2)
bin('0x36e')
bin(int('0x36e', 10))
bin(int('0x36e', 16))
bin(878)
bin(42)
to_1scomp(bin(42)[2:])
to_2scomp(bin(42)[2:])
exit
exit()
from rdig_hanskuy import *
bin(-1)
bin(-8)
to_sam('0111')
to_sam('1111')
from rdig_hanskuy import *
to_sam('1000')
to_sam('0009')
to_sam('0000')
to_sam('1001')
to_sam('0111')
int('0111', 2)
172832 // 10
6 & ~6
6 & ~7
1 & ~0
0 & ~1
1 & ~1
0 & ~0
'0b111' & '0b010'
'  aaj'.strip()
'  aaj'.strip().upper()
1 | 0
2 ^ 5
2 ^ 5 ^ 2
2 ^ 5 ^ 2 ^ 5
 ^ 2
2 ^ 5 ^ 2 ^ 5 ^ 2
 ^ 5
2 ^ 5 ^ 2 ^ 5 ^ 2 ^ 5
ord('E')
import math
math.fact(5)
math.factorial(5)
math.factorial(1000000)
math.factorial(100000)
from math import factorial
factorial(100000)
2 ** 64
10 ** 18
len('/api/user/register/6067ddc0c174b816b6896d7f')
50000/60
833 / 60
100 * 15000
408 / 2.4
340 / 2.4
340 / 1.4
if __name__ == '__main__':
r'\\'
r'\'
r'/'
r'New Uploads[\w\W]+<a href="\/g\/[\d]+'
r'New Uploads[\w\W]+<a href="/g/[\d]+'
int('j79')
'New Uploads</h2><div class="gallery" '
'New Uploads</h2><div class="gallery" data-tags="29963 17249 1238 35763 19390 19018 25050 35762 85295 22942 33173"><a href="/g/354341'.split('/')
11  // 3
9 / 3
9 // 3
2 ** 20
984 * 2
77 * 5
2 ** 69
2 ** 64
112 * 3
62 * 5
import gc
gc.collect()
def go(n):
	for _ in range(n):
def go(n):
	return (0.5 ** n) * (0.75)**((n ** 2 - n) / 2)
go(1000000000000)
go(1000000000000000000000000)
go(100)
go(10)
def go2(n):
	for _ in range(n):
def go2(n):
	res = 1
	for _ in range(n):
		res *= 0.5 * (0.75 ** n)
	return res
go2(1000)
go2(10)
go2(20)
go2(4)
1 / 16
from dotenv import load_dotenv
import string
string.symbol
string
string.punctuation
foo: type(foo # foo is
          := # an int of
          1) # value 1
print(foo)
foo := 5
foo: type(foo := 5)
foo
3000225/139979449
3000225/139979449 * 100
def fib(5):
def fib(n):
	for _ in range(n):
def fib(n):
	a = 0
	b = 1
	for _ in range(n):
		a, b = b, a + b
		yield b
print(*fib(5))
import pyautogui
pyautogui.pos()
pyautogui.x()
pyautogui.pos
pyautogui.position()
pyautogui.KEYBOARDKEYS
pyautogui.FAILSAFE
pyautogui.KEYBOARD_KEYS
import pyautogui
time.sleep(1.5)
import time
time.sleep(1.5)
pyautogui.PAUSE
pyautogui.PAUSE = 1
pyautogui.PAUSE
def run():
	time.sleep(2)
	pyautogui.press('a')
	pyautogui.press('b')
	pyautogui.press('c')
run()
pyautogui.PAUSE = 3
pyautogui.PAUSE = 3.0
run()
pyautogui.PAUSE = 0.5
run()
pyautogui.PAUSE = 1.0
run()
pyautogui.PAUSE = 0.3
run()
16500 * 3
16600 * 3
300 - 14 - 1
import asyncio
async def h1():
	asyncio.sleep(3)
async def h1():
	await asyncio.sleep(3)
	print('h1')
async def h2():
	await asyncio.sleep(3)
	print('h1')
async def a():
	b = h1()
	c = h2()
	await b
	await c
asyncio.run(a())
async def a():
	b = asyncio.create_task(h1())
	c = asyncio.create_task(h2())
	await b
	await c
asyncio.run(a())
async def h1():
	await async.sleep(3)
async def h1():
	await asyncio.sleep(3)
	return 'h1'
async def h2():
	await asyncio.sleep(3)
	return 'h2'
async def a():
	b = h1()
async def a():
	b = asyncio.create_task(h1())
	c = asyncio.create_task(h2())
	print(await b)
	print(await c)
asyncio.run(a())
async def a():
	b = asyncio.create_task(h1())
	c = asyncio.create_task(h2())
	await b
	await c
	return (b, c)
asyncio.run(a())
async def a():
	b = asyncio.create_task(h1())
	c = asyncio.create_task(h2())
	b = await b
	c = await c
	return (b, c)
asyncio.run(a())
async def func():
	asyncio.sleep(3)
async def func():
	a = asyncio.sleep(3)
	b = asyncio.sleep(3)
	await a
	await b
asyncio.run(func())
async def func():
	a = asyncio.create_task(asyncio.sleep(3))
	b = asyncio.create_task(asyncio.sleep(3))
	await a
	await b
asyncio.run(func())
9 * 0.3
max(50.69, 5)
max(50.69, 51)
max(50.69, 50.7)
max(50.69, 50.69)
max(50.69, 50.61)
max(50.69, 50.691)
float(1)
830 * 
830 * 4
from random import randint
randint(1, 5)
a = 1
def b():
	a = 69
b()
a
899999 / 60
899999 / 60 / 60
def a():
	return b
a()
from random import choice
choice()
choice('da', 'sda')
choice(['da', 'sda'])
choice(['da', 'sda', 'bruh])
choice(['da', 'sda', 'bruh'])
choice(('da', 'sda', 'bruh'))
a = not False
a
841 * 6
-1 + 525187879
-1 + 525187879
#include <bits/stdc++.h>
using namespace std;
#define MAX(a,b,c) max(a,max(b,c))
#define MIN(a,b,c) min(a,min(b,c))
#define MP make_pair
#define FOR(i, a, b) for(int i = a; i < b; ++i)
#define gcd __gcd
typedef pair<int, int> pii;
typedef long long ll;
const int MAX_N = 1e5 + 1;
//0xACCE97ED;
int main() {
	int n, a, neg = 0, pos = 0, zer = 0;
	ll cost = 0;
	scanf("%d", &n);
	for(int i = 0; i < n; ++i) {
		scanf("%d", &a);
		if(a == 0) ++zer;
		else if(a > 0) {
			++pos;
			cost += a - 1;
		}
		else {
			++neg;
			cost += (-1 - a);
		}
	}
	cost += zer;
	if(neg & 1) {
		if(!zer) {
			cost += 2;
		}
	}
	printf("%lld\n", cost);
	return 0;
2 ** 16
2 ** 32
10 ** 9
255 * 255 * 255
a = [1, 2, 3]
'\n'.join(a)
a = 3
if ~a%3:
	print('woe')
a = 4:
a = 4
if ~a%3:
	print('wow')
(200 -100) /100
100000 / 60
69 ** 5
69 ** 4
from wordcloud import STOPWORDS
STOPWORDS
'the' in STOPWORDS
'thou' in STOPWORDS
from wordcloud import STOPWORDS
STOPWORDS
{*STOPWORDS, 'thou'}
'thou' in {*STOPWORDS, 'thou'}
'below' in {*STOPWORDS, 'thou'}
'will' in {*STOPWORDS, 'thou'}
2 ** 32
10 ** 9
475 % 10
import pyperclip
ls
pyperclip.copy('kontol')
import pylint
__name__
ceil
32 * 4
32 * 5
from pyperclip import copy, paste
paste()
29 - 33
'ake' in 'takes'
1021834 > 1025563
a = 'AMOGUS'
''.join(a.lower().split())
a = [1,2,3,4,5]
a[:-1]
a = adadjsa
a = 'adadjsa'
a.split()
a.split('\n')
_API = urljoin(HOME, '/api/gallery/')
import asyncio
async def a():
	return 69
b = asyncio.run(a())
b
import asyncio
import aiohttp
async get():
async def get():
	r = None
	async with aiohttp.ClientSession() as session:
		async with session.get("https://nhentai.net/api/gallery/177013", headers={'User-Agent': 'Amogus'}):
async def get():
	r = None
	async with aiohttp.ClientSession() as session:
		async with session.get("https://nhentai.net/api/gallery/177013", headers={'User-Agent': 'Amogus'}) as r:
			return r
async def lesgo():
	r = await get()
	r = await r.json()
asyncio.run(lesgo())
async def lesgo():
	r = await get()
	print(r)
asyncio.run(lesgo())
async def lesgo():
	r = await get()
	print(r.url)
asyncio.run(lesgo())
a = 0
if a:
	print('woe')
else:
	print('kntl')
import requests
def go():
	for _ in range(1000):
		requests.get('https://www.reddit.com/r/copypasta/top/.json?sort=top&t=day&showmedia=true&mediaonly=true&is_self=true&limit=69', headers={'User-Agent': 'amogus'})
go()
def go():
	for _ in range(1000):
		res = requests.get('https://www.reddit.com/r/copypasta/top/.json?sort=top&t=day&showmedia=true&mediaonly=true&is_self=true&limit=69', headers={'User-Agent': 'amogus'})
		if not res.ok:
			print('Woe')
def go():
go()
bool('')
bool(' ')
a = 'jeovn kntl'
a.split('')
a.split(' ')
a = 'jev '
a.isalpha()
'?'.isalpha()
import redis
r = redis.Redis()
import json
a = {'bro': 69, 'keke': 'https'}
json.dump(a)
help json.dump
json.dumps(a)
json.loads(json.dumps(a))
json.loads(json.dumps(a)) == a
import redis
r = redis.Redis()
r.mset({"Croatia": "Zagreb", "Bahamas": "Nassau"})
json.dumps({'a': 'b'})
import json
json.dumps({'a': 'b'})
json.loads(json.dumps({'a': 'b'}))
3052 / 60
4.23/30 * 100
4126 / 60
import youtube_dl
from hentai import Hentai
a = '
a = ''
b = ' '
c = {8}
not any(a, b, c)
not any((a, b, c))
not all((a, b, c))
a = 19
not all((a, b, c))
not {}
a = '83180318031'
len(a)
import requests
res = requests.get('https://nhentai.net/random')
res.url
import
import requests
requests.get('https://gist.githubusercontent.com/LordRonz/da8dcbf4cfdd07a19f239f5f6f555299/raw/1502daebb56ede76e09246d2a839f7a9e0192e05/gooba.txt').text.split('\n')
requests.get('https://gist.githubusercontent.com/LordRonz/da8dcbf4cfdd07a19f239f5f6f555299/raw/1502daebb56ede76e09246d2a839f7a9e0192e05/gooba.txt').text.split('\n\n')
len(requests.get('https://gist.githubusercontent.com/LordRonz/da8dcbf4cfdd07a19f239f5f6f555299/raw/1502daebb56ede76e09246d2a839f7a9e0192e05/gooba.txt').text.split('\n\n'))
import main
main.extensions
'anjni' or ''
'anjni' and 'sad'
550/24
async def get_sauce(url):
a = {'a': 10}
if a['a']:
	print(a['a'])
if not a['b']:
	print('No')
'b' in a
'a' in a
type({})
type({}) == 'dict'
strtype({})
str(type({}))
type({}) is dict
a = {'a': 'b'}
**a
print(**a)
type(a)
import dis
def a():
	return not not [1, 2]
def b():
	return bool([1, 2])
dis.dis(a)
dis.dis(b)
b()
a()
def c():
	a = 2
	a = a + 1
def d():
	a = 2
	a += 1
dis.dis(c)
dis.dis(d)
def c():
	a = 2
	a * 2
def d():
	a = 2
	a + a
dis.dis(c)
dis.dis(d)
{} is dicr
{} is dict
[] is list
def a():
	x = ['1', '2', '3']
def b():
	x = ('1', '2', '3')
dis.dis(a)
dis.dis(b)
def a():
	x = dict()
def b():
	x = {}
dis.dis(a)
dis.dis(b)
a = {}
a['asu'] = 69
a
def a():
	x = dict()
	x['a'] = 69
def b():
	x = {}
	x['a'] = 69
dis.dis(a)
dis.dis(b)
type({}) is dict
type({}) is set
type({,}) is set
type({8,}) is set
from random import choice
choice((0,1,2,3))
import gc
gc.collect()
1.15 * 3
3.45 * 0.9
import dis
type({})
type({1})
type({,})
type({()})
a = {()}
a
a.discard(())
a
a = set()
b = (,)
b = ()
b
type(b)
a = {,a}
a = {,}
a = {},
a = {},[0]
a
a = ({},)[0]
a
type(a)
a = {*()}
type(a)
def g():
	a = {*()}
def h():
	a = set()
dis.dis(g)
dis.dis(h)
a = set()
a.add(1)
a
a = {'a', 'si', 'ans', 'gone', 'wi', 'ld'}
for b in a:
	print(b)
'a' in a
a.discard('a')
'a' in a
help(iter)
iter(int, 1)
import dis
def a():
	x = 2
	x *= 2
def b():
	x = 2
	x += x
dis.dis(a)
dis.dis(b)
1 << 1
8 << 1
vol = 8
vol = 'a'
0 < a
0 < vol
int('018')
int('a018')
max(0,1)
max(8,1)
def a(b :int) {}
def a(b :int):
	print(type(b))
a(119)
type(112)
a(dssd)
a('dssd')
int(None)
28888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888
8888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888



s = 'ssusuususssssuuuuuussssss'
from itertools import groupby
b = ''.join(i for i, _ in groupby(s))
b
a = 'bribrioraroaborboab'
a.replace('b', 'a')
if a := 5 > 2:
	print('woe')
a
if gaga := {}:
	print('kontol')
gaga
if 'a' in (a := 'brobaa') and 3 > 1:
	print('kntl')
if 'a' in (a := 'brobooo') and 3 > 1:
	print('memek')
a
if (a := 'a') in (b := 'brobooo') and 3 > 1:
	print('colmek')
a
b
if (a := 'a') in (b := 'brobaoo') and 3 > 1:
	print(69)
def nowalrus():
	a = 'sus'
	if a in 'ssuuuusu':
		print(a)
def walrus():
	if (a := 'sus') in 'ssuuuusu':
		print(a)
import dis
dis.dis(nowalrus)
dis.dis(walrus)
0 or None
8 or None
None or True
'a' == "a"
a = 0 or None
a
type(a)
None
0
{} or None
class tete:
	bro = 'kntl'
	def __init__(self):
		a = self.bro
		print(id(a))
		print(id(self.bro))
Tete()
tete()
any(1, 0, False)
any((1, 0, False))
any(({}, 0, False))
not any(({}, 0, False))
any(({}, 0, False)) ^ 1
any(({}, 0, False)) ^ True
a = True
a ^ 1
a ^ True
import dis
from dis import dis
a = lambda x, y: x + y
def b(x, y):
	return x + y
dis(a)
dis(b)
type(b)
type(a)
from sys import getsizeof
d = {}
getsizeof(d)
d = {'adjladlajdla': 'djsajdlajldajldjaljljlnlncnowncwoncoq'}
getsizeof(d)
d = {'adjladlajdla': 'djsajdlajldajldjaljljlnlncnowncwoncoqdahnc9c2ndigfhicbib9cibsc'}
getsizeof(d)
d = {'adjladlajdla': 'djsajdlajldajldjaljljlnlncnowncwoncoqdahnc9c2ndigfhicbib9cibscnterestenterestenterestenterestenterestenterestentereste'}
getsizeof(d)
d = {'adjladlajdla': 'djsajdlajldajldjaljljlnlncnowncwoncoqdahnc9c2ndigfhicbib9cibscnterestenterestenterestenteresten', 'a': 'a', 'b': 'b'}
getsizeof(d)
g = set()
getsizeof(g)
getsizeof(u'a')
getsizeof('a')
getsizeof(b'a')
getsizeof(d['a'])
getsizeof(d['adjladlajdla'])
getsizeof(g)
g.insert('daldajda')
g.add('daldajda')
getsizeof(g)
g.add('a')
g.add('b')
g.add('c')
g.add('d')
g.add('e')
g.add('f')
g.add('g')
g.add('h')
g.add('i')
getsizeof(g)
g.detach('a')
g.discard('a')
g.discard('b')
g.discard('c')
g.discard('d')
g.discard('e')
g.discard('f')
g.discard('g')
g.discard('h')
getsizeof()
g.discard('i')
g
getsizeof(g)
import gc
gc.collect()
getsizeof(g)
g = set()
getsizeof(g)
g.insert('a')
s = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']
byte('a')
astr = 'a'
byte(astr)
bytes(astr)
bytes(astr, 'utf-8')
for c in s:
	g.add(c)
getsizeof(g)
h = set()
for c in s:
	c1 = bytes(c, 'utf-8')
	h.add(c1)
getsizeof(h)
g.add('j')
getsizeof(g)
g.add('k')
getsizeof(g)
g.add('l')
getsizeof(g)
g.add('m')
getsizeof(g)
g.add('n')
getsizeof(g)
g.add('o')
getsizeof(g)
g.add('p')
g.add('q')
g.add('r')
getsizeof(g)
g.add('s')
getsizeof(g)
h.add('j')
h.add('k')
h.add('l')
h.add(b'm')
h.add(b'n')
h.add(b'o')
h.add(b'p')
h.add(b'q')
h.add(b'r')
h.add(b's')
getsizeof(h)
for i in range(19):
i = set()
for i in range(19):
	i.add(i)
for j in range(19):
	i.add(j)
i = set()
for j in range(19):
	i.add(j)
i
getsizeof(i)
for j in range(1000):
	i.add(j)
getsizeof(i)
for j in range(1000000):
	i.add(j)
getsizeof(j)
getsizeof(i)
gc.collect()
g.clear()
i.clear()
getsizeof(i)
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
g.add('a')
g.discard('a')
getsizeof(g)
a = set()
a.clear()
if a:
	1
if a:
	print(1)
a.add('a')
if a:
	print(1)
a.discard('a')
if a:
	print(1)
a
bin(201)
147 / 11
from random import randint
while (x := randint(1,3)) == 2:
	print(x)
while (x := randint(1,3)) == 2:
	print(x)
while (x := randint(1,3)) == 2:
	print(x)
while (x := randint(1,50)) <= 20:
	print(x)
while (x := randint(1,50)) <= 20:
	print(x)
import psutil
psutil.Process().memory_info().rss / 1024 ** 2
a = (*range(1000000))
a = [*range(1000000)]
psutil.Process().memory_info().rss / 1024 ** 2
a = []
psutil.Process().memory_info().rss / 1024 ** 2
psutil.Process.memory_info().vms
psutil.Process().memory_info().vms
psutil.Process().memory_info().rss / 1024 ** 2
psutil.Process().memory_info().vms / 1024 ** 2
psutil.Process().memory_info().rss / 1024 ** 2
a = [*range(10000000)]
psutil.Process().memory_info().rss / 1024 ** 2
psutil.Process().memory_info().vms / 1024 ** 2
type(psutil.Process().memory_info().vms / 1024 ** 2)
psutil.cpu_percent()
psutil.virtual_memory()
psutil.virtual_memory().percent
2 ** 20
1024 ** 2
psutil.Process().memory_info().rss / 1048576
a = []
psutil.Process().memory_info().rss / 1048576
psutil.Process().memory_info().vms / 1048576
import os
os.getpid()
psutil.Process().memory_info().vms / 1048576
a = [1,2,3,4]
b = (*a)
b = (*a,)
b
type(b)
psutil.Process().memory_info().vms / 1048576
a = [*range(1000000)]
psutil.Process().memory_info().vms / 1048576
a = []
psutil.Process().memory_info().vms / 1048576
a = [*range(1000000)]
psutil.Process().memory_info().vms / 1048576
a = []
psutil.Process().memory_info().vms / 1048576
a = (*range(1000000),)
psutil.Process().memory_info().vms / 1048576
a = []
psutil.Process().memory_info().vms / 1048576
a = (*range(1000000),)
psutil.Process().memory_info().vms / 1048576
from random import shuffle
shuffle((1,2,3))
shuffle([1,2,3])
a = (1,2,3)
shuffle(a)
from sys import getsizeof
a = True
getsizeof(True)
getsizeof(a)
'A'.lower()
ord('b') - ord('a')
ord('a')
ord('d')
import html
html.unescape('&#039;')
html.unescape('&pi;')
len('Sean Connery wasn&#039;t in &quot;Indiana Jones and the Kingdom of the Crystal Skull&quot; because he found retirement too enjoyable.')
a = {1,2,3}
for c in a:
	print(c)
for c in a:
	print(c)
for c in a:
	print(c)
0xff0000
9999 ** 9
376174 / 25
2 ** 20000
from sys import getsizeof
getsizeof(2 ** 2000)
getsizeof(2)
getsizeof(2 ** 30)
getsizeof(2 ** 30 - 1)
getsizeof(2 ** 31)
getsizeof(2 ** 60)
getsizeof(2 ** 60 - 1)
1.IS_SMALL_INT
a = 1
a.IS_SMALL_INT
from ctypes import *
printf = libc.printf
libc.printf
from ctypes import *
c_int()
i = c_int(3)
i.value
from sys import getsizeof
libc.printf
getsizeof(i)
getsizeof(2)
getsizeof(True)
b = c_bool(1)
b.value
getsizeof(b)
cdll.LoadLibrary("libc.so.6")
libc.printf
libc = CDLL("libc.so.6")
libc.printf
libc.print("Hello world\n")
libc.printf("Hello world\n")
printf = libc.printf
printf(b'hello world')
printf(b'hello world\n')
from timeit import timeit
timeit('print("Hello world")')
timeit(stmt='print("Hello world")')
a = 5
a
del a
a
a = {'a': 'sb'}
**a
b = **a
b = (**a,)
b
timeit('b = "bro"; c = "ajg"; a = b + b')
timeit('b = "bro"; c = "ajg"; a = b + c')
timeit('b = "bro"; c = "ajg"; a = f"{b}{c}"')
timeit('b = "bro"; )
from psutil import Process
a = Process()
memory_info().vms / 1048576
a.memory_info().vms / 1048576
b = [*range(1000000)]
a.memory_info().vms / 1048576
del b
a.memory_info().vms / 1048576
timeit('b = 6999; a = str(b)')
timeit('b = 6999; a = f"{b}"')
timeit('b = 6999; a = str(b)')
timeit('b = 6999; a = f"{b}"')
timeit('b = 6999; a = str(b)')
timeit('b = 6999; a = f"{b}"')
timeit('b = 6999; a = str(b)')
b = 6999
f'{b}'
str(b)
a = {'a': 'b', 'c': 'd'}
len(a)
round(6.9)
round(6.99019301)
type(round(6.99019301))
from time import time
sta = time()
time() - sta
type(round(time()-sta))
timeit('b = 6999; a = str(b)')
timeit('b = 6999; a = f"{b}"')
timeit('b = 6999; a = str(b)')
timeit('b = 6999; a = f"{b}"')
from dis import dis
def a():
	b = 5
	return f'{b}'
def b():
	b = 5
	return str(b)
dis(a)
dis(b)
a = 1, 2
a
a = 1
a is 1
a = True
a is True
def a():
	a = [1,2,3,4,5]
	len(a)
def b():
	a = [1,2,3,4,5]
	a.__len__()
dis(a)
dis(b)
timeit(a, number=1000000)
timeit(b, number=1000000)
c = {1,2,3,5}
c.__len__()
int(6.9)
from math import floor
def a():
	a = 6.9
	return floor(a)
def b():
	a = 6.9
	return int(a)
timeit(a, number=1000000)
timeit(b, number=1000000)
def a():
	a = {'a': 'b', 'c':'d'}
	return len(a)
def b():
	a = {'a': 'b', 'c':'d'}
	return a.__len__()
timeit(a, number=1000000)
timeit(b, number=1000000)
def a():
	a = ['1', '2', '3', '4', '5']
	return len(a)
def b():
	a = ['1', '2', '3', '4', '5']
	return a.__len__()
timeit(a, number=1000000)
timeit(b, number=1000000)
0x0000
from random import randint
randint(0xab, 0xff0000)
626/614
558/547.3
12 * 365
'8'.lower()
'A'.lower()
a = ['', 'a', 'b', '']
''.join(a)
a = ['', 'a', 'b', '', None]
''.join(a)
def a():
	a = 'aNAKfnna'
	for c in a.lower():
		b = c
from dis import dis
dis(a)
def a2():
	a = 'abcdefghijklmnopqrstuvwxyz'
	return 'z' in a
from string import ascii_lowercase as al
def b():
	return 'z' in al
from dis import dis
dis(a2)
dis(b)
from timeit import timeit
timeit(a2, number=1000000)
timeit(a2, number=10000000)
timeit(b, number=10000000)
timeit(a2, number=10000000)
abc = {'a': 1, 'b': 2}
abc['c'] or 4
(a for a in range(12),)
(*(a for a in range(12)),)
700000/8
a = (1,2,3,4)
b = a
id(b)
id(a)
135
1e5
1054926 / 67
b'\u0633\u064f\u0648\u0631\u064e\u0629\u064f \u0627\u0644\u0628\u064e\u0642\u064e\u0631\u064e\u0629\u0650'.decode()
b'\u0633\u064f\u0648\u0631\u064e\u0629\u064f \u0627\u0644\u0628\u064e\u0642\u064e\u0631\u064e\u0629\u0650'.decode('utf-8')
'\u0633\u064f\u0648\u0631\u064e\u0629\u064f \u0627\u0644\u0628\u064e\u0642\u064e\u0631\u064e\u0629\u0650'.encode('utf-8')
'\u0633\u064f\u0648\u0631\u064e\u0629\u064f \u0627\u0644\u0628\u064e\u0642\u064e\u0631\u064e\u0629\u0650'.encode('utf-8').decode()
'\u0633\u064f\u0648\u0631\u064e\u0629\u064f \u0627\u0644\u0628\u064e\u0642\u064e\u0631\u064e\u0629\u0650'
a = 2
b = 2
a is b
int(5)
int('5')
'absdc'.split()
' '.join('absdc'.split())
'+'.join('')
'O YOU who have attained to faith! Whenever you give or take credit for a stated term, set it down in writing. And let a scribe write it down equitably between you; and no scribe shall refuse to write as God has taught him: thus shall he write. And let him who contracts the debt dictate; and let him be conscious of God, his Sustainer, and not weaken anything of his undertaking. And if he who contracts the debt is weak of mind or body, or, is not able to dictate himself, then let him who watches over his interests dictate equitably. And call upon two of your men to act as witnesses; and if two men are not available, then a man and two women from among such as are acceptable to you as witnesses, so that if one of them should make a mistake, the other could remind her. And the witnesses must not refuse [to give evidence] whenever they are called upon. And be not loath to write down every contractual provision, be it small or great, together with the time at which it falls due; this is more equitable in the sight of God, more reliable as evidence, and more likely to prevent you from having doubts [later]. If, however, [the transaction] concerns ready merchandise which you transfer directly unto one another, you will incur no sin if you do not write it down. And have witnesses whenever you trade with one another, but neither scribe nor witness must suffer harm; for if you do [them harm], behold, it will be sinful conduct on your part. And remain conscious of God, since it is God who teaches you [herewith] - and God has full knowledge of everything'
len('O YOU who have attained to faith! Whenever you give or take credit for a stated term, set it down in writing. And let a scribe write it down equitably between you; and no scribe shall refuse to write as God has taught him: thus shall he write. And let him who contracts the debt dictate; and let him be conscious of God, his Sustainer, and not weaken anything of his undertaking. And if he who contracts the debt is weak of mind or body, or, is not able to dictate himself, then let him who watches over his interests dictate equitably. And call upon two of your men to act as witnesses; and if two men are not available, then a man and two women from among such as are acceptable to you as witnesses, so that if one of them should make a mistake, the other could remind her. And the witnesses must not refuse [to give evidence] whenever they are called upon. And be not loath to write down every contractual provision, be it small or great, together with the time at which it falls due; this is more equitable in the sight of God, more reliable as evidence, and more likely to prevent you from having doubts [later]. If, however, [the transaction] concerns ready merchandise which you transfer directly unto one another, you will incur no sin if you do not write it down. And have witnesses whenever you trade with one another, but neither scribe nor witness must suffer harm; for if you do [them harm], behold, it will be sinful conduct on your part. And remain conscious of God, since it is God who teaches you [herewith] - and God has full knowledge of everything')
a = 'shac'
a[0:]
a[:]
a[]
192/24
1482739 / 95
rount(7/2)
round(7/2)
(7//2)
0.83 - 0.75
(0.83 - 0.75) / (0.97 - 0.75)
int(512/2-1)
2 ** -1
512/2-1
1e5
import os
os.urandom(24)
int(os.urandom(24))
str(os.urandom(24))
(os.urandom(24))
int('sdjal')
int('32130')
112 * 3
68 * 5
(100 + 100 + 91)/3
\u0083
'\u0083'
u'\u0083'
str(u'\u0083')
'a' << 5
int('a') << 5
\u0083
'\u0083'
ord('a')
ord('\u0083')
ord('ƒ')
ord('\u0061')
ord('\u0083')
131 << 5
4192 >> 5
ord('{')
ord('g')
ord('1')
ord('')
ord('â')
ord('€')
ord('ƒ')
chr(32)
chr(8195)
chr(73)
chr(86)
chr(66)
chr(79)
chr(78)
chr(74)
chr(86)
chr(73)
chr(137)
chr(147)
ord('0')
chr(58)
chr(57)
48 * 16
172 / 8
chr(int('1010', 2))
chr(int(bin(ord('a')), 2))
a = 'dsasda'
a[2] = 'z'
ord(0x55)
ord('0x55')
ord(int('0x55'))
ord(int('0x55', 16))
chr(0x55)
0b011
a = [2]
b = [4]
a + b
[a, b]
'b' ^ 0x55
8 ^ 5
13 ^ 5
hex(1096770097)
bin(1231)
bin(892756537)
len(bin(892756537))
len(bin(1701067056))
bin(1231)[2:]
chr(10)
a = 'sdads'
a.encode()
chr(0x23)
hex(ord('g'))
hex(ord('B'))
29000 / 214
6900 / 61
len('pengumuman')
len('announcement')
'a' ^ 'b'
ord('a') ^ ord('b')
ord('a') & ord('b')
chr(96)
ord('a') & ord('Z')
ord('a') & ord('a')
ord('a') ^ ord('a')
ord('a') & ord('Z')
chr(ord('a') & ord('Z'))
5 & 4
5 & 9
5 & 11
5 & 13
5 & 5
5 & 5 & 5
5 ^ 13
!8
!8~8
~8
~10
'sdjajldsa'.split()
'sdjajldsa'.split('')
list('sdadsa')
chr(ord('s'))
str(ord('s'))
420 % 69
420 % 69 - 5
''.join(list('sdadsa'))
'sdjajldsa'.split('s')
'sdjajldsa'.split('sa')
'sa'.join('sdjajldsa'.split('sa'))
''.join('sdjajldsa'.split('sa'))
690 % 23
a = [1,2,3,4]
b = [1,2,3,4]
a == b
a = (*[c for c in range(10)])
a = (*[1,2,3])
a = [1,2,3,4]
c = {*a}
c
a = (*[1,2,3],)
a
a = [*[1,2,3]]
a
a = [*(*[1,2,3],)]
a
a = [*(*[1,2,3],)] * 1
a
a = [*(*[1,2,3],)] * 2 / 1
a = [*(*[1,2,3],)] * 2
420 % 32
420 % 31
420 % 30
420 % 29
420 % 31
420 % 32
420 % 33
420 % 34
420 % 35
420 % 36
420 % 37
3*320%3
ord('h')
ord('h') - 1
hex(ord('h') - 1)
(ord('h')+69-70+(3*320%23))
(ord('h')+69-70+0)
3 * 320 % 23
690 % 23
320 % 23
3 * 230 % 23
800 // 3
0b10011 & 0b110101
bin(0b10011 & 0b110101)
bin(0b010011 & 0b110101)
0b10001 == 0b010001
5/6
18 + 22 + 23 + 22
85 + 21
213893 % 10
'sdsdasd'[:-2]
'sdsdasd'[:-1]
255*255*255*255
2 ** 32
2 ** 128
a = ['sda', 'ds', 'ss', 'aaa']
for i in a:
	print(i)
print 'sdad'
900000 == 1000 * 60 * 15
10000//5
int('0xffff', 16)
int('0xffff', 16) ** 8
2 ** 128
65536 ** 8
a = [6, 9]
b = [a, a]
b
b[1]
b[1][1]
reversed([1,2,3])
[1,2,3].sort()
a = [1,2,3]
a.sort()
a
a.sort(reverse=True)
a
'sads sd as'.split()
for c in 'LordRonz':
	print(ord(c))
for c in 'aarontanhar':
	print(ord(c))
'ninetyseven,ninetyseven,ahundredfourteen,ahundredeleven,ahundredten,ahundredsixteen,ninetyseven,ahundredten,ahundredfour,ninetyseven,ahundredfourteen'
111 * 921031203128349172981294719749149141491914
111 * (921010851083920850060101925801082377293506281237474919 + 03821391748931759839589395835985389981118238 - 3819489583588381941894189) ** 2
111 * (921010851083920850060101925801082377293506281237474919 + 3821391748931759839589395835985389981118238 - 3819489583588381941894189) ** 2
94156969648171771920829824344468081513635762098328654041130781514629148355417471035334995033589894341041417664 / 111
94156969648171771920829824344468081513635762098328654041130781514629148355417471035334995033589894341041417664 / ((921010851083920850060101925801082377293506281237474919 + 3821391748931759839589395835985389981118238 - 3819489583588381941894189) ** 2)
chr(0x74)
0x74
114 >> 1
57 << 1
104 >> 1
52 << 1
2009 - 97
for c in 'aarontanhar':
	
max([ord(c) for c in 'aarontanhar'])
min([ord(c) for c in 'aarontanhar'])
bin(114)
5762098328654041130781514629148355417471035334995033589894341041417664
94156969648171771920829824344468081513635762098328654041130781514629148355417471035334995033589894341041417664 / ((921010851083920850060101925801082377293506281237474919 + 3821391748931759839589395835985389981118238 - 3819489583588381941894189) ** 2)
97 ^ 54
54 ^ 97
54 ^ 87
(54 ^ 87) >> 1
(54 ^ 87) << 1 >> 1
54 ^ 87 << 1 >> 1
97 ^ 69
69 ^ 36
bin(69)
bin(36)
bin(97)
'0b1000101'
'0b100100'
'0b0100100'
'0b1000101'
'0b1100001'
2009-1912
69 ^ 36
17 & 69
420 % 69
45 % 69
450 % 69
432 % 69
431 % 69
97 + 17
1912 % 69
49 % 69
1912 ^ 69
oct(1912)
int('0o3570', 8)
2009 - 1912
's'.is_lower()
's'.lower()
's'.islower()
'4'.islower()
52 << 1
hex(65)
hex(65)[2:]
18 * 4
hex(64)
bin(64)
bin(65)
hex(65)
hex(int('0x0010000000000100', 2))
hex(int('0x10000000000100', 2))
hex(int('0b0010000000000100', 2))
hex(int('0b1111111111101001', 2))
hex(23)
hex(-23)
hex(int('0x100', 16) + 1)
for i in range(20):
	print(hex(int('0x100', 16) + i))
2 ** 8
len('07211940000055')
ord('i')
hex(ord('i'))
int('0xff', 16)
bool('sdadasd')
bool('')
2 ** 16
hex(2560)
ord('z')
chr(123)
len("{guy above me is ultra gae pro max")
273 / 398
2472 / 330
2472 / 3300
2472 / 3600
len('`^",:;Il!i~+_-?][}{1)(|\\/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$')
13710 + 1371
1377 + 1370
1377 + 137
list(range(2,2))
len('`^",:;Il!i~+_-?][}{1)(|\\/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$')
len($@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`'.)
len('$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`\'.')
len('$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`\'. ')
reverse('$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`\'. ')
'$@B%8&WM#*oahkbdpqwmZO0QLCJUYXzcvunxrjft/\|()1{}[]?-_+~<>i!lI;:,"^`\'. '[::-1]
2 ** 16
ord('�')
8 ^ 8
'💦'
len('💦')
len('dhandutz 💦💦💦💦💦💦💦💦💦💦')
a = '💦'
'dhandutz'.ljust(32, a)
def basah(name):
	print(name.ljust(32, '💦'))
basah('AppleBeezNuts')
basah('AppleBeezNutssssssssssssssssssss')
basah('AppleBeezNutsssssssssssssssssssss')
basah('AppleBeezNutsssss')
basah('AppleBeezNutssssss')
basah('AppleBeezNutsssssss')
basah('Yeslya')
import random
random.choice(['L', 'P'])
def basah(name):
	print(name.ljust(32, '💦'))
basah('licks')
basah('rv')
basah('COLI')
def basah(name):
	return name.ljust(32, '💦')
basah('Admiral Kusnaedi')
basah('jonbbw')
def rec(a, b):
def rec(a, b, c):
def rec(a, b, c = 0):
def rec(a, b):
	if b <= a:
		return a
	return b + rec(a, b - 2)
rec(2, 8)
a = [12,2,4,5,6]
a.__len__
a.__len__()
len(a)
b = 'dsadsd'
b.__len__()
bin(23)
int('0b1110', 2)
hex('0b1110', 2)
hex(int('0b1110', 2))
hex(int('0b1001', 2))
bin(8)
hex(int('0b1000', 2))
hex(345)
chr(135)
ord('ç')
for c in '1 12 12':
	print(ord(c))
chr(13)
chr(10)
chr(0x05)
chr(5)
373 / 1.4
299 / 1.2
249 * 3
961 / 3
385 / 3
961 / 7
961 / 9
961 / 2
961 / 5
385 / 5
'i'.join(['t', 'a'])
16 * 9
ord('\0')
chr(10)
byte('dsds')
bytes('dsds')
bytes('dsds', 'utf-8')
bytes('dsds', 'utf-8') == b'dsds'
chr(10)
chr(48)
ord('\r')
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalpha() else a for a in input()))
google.com
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalpha() else a for a in input()))
youtu.be/g3jCAyPai2Y
1000000 / 10329
(14415 + 14283 + 14630) / 3
'ks'.ljust(2, '3')
'kssdds'.ljust(2, '3')
'kssdds'.ljust(10, '3')
'kssdds'.ljust(32, '💦')
def asw(name):
	return name.ljust(32, '💦')
asw('Almer')
asw('Setot')
asw('Willdan')
repr('\n\r')
chr(40)
8 * 13
a = ['s', 'ds', '1', 'g', 'kls', 'elw', 'ds']
a[-5]
a = [4,75,74,31,76,79,27,19,69,46,98,59,83,23,90,52,87,6,11,92,80,51,43,5,94,17,15,67,25,30,48,47,62,71,85,58,60,1,72,99,3,35,42,10,96,49,37,36,8,44,70,40,45,39,0,63,2,78,68,53,50,77,20,55,38,86,54,93,26,88,12,91,95,34,9,14,33,66,41,13,28,57,29,73,56,22,89,21,64,61,32,65,97,84,18,82,81,7,16,24]
len(a) == len(set(a))
10 + 16 + 15 + 19 + 18 + 8 + 26 + 20 + 22 + 13 + 6 + 15
len(a)
a.index(51)
for c in 'urmomgae':
	print(ord(c))
chr(117)
chr(114)
ord('A')
ord('\0')
from secrets import choice
f'{{{choice(range(1, 101))} {choice(range(1, 101))} {choice(range(1, 101))}}}\n'
ord('A')
1000000 / 17232
142830 / 10267
(10329 + 10267 + 10665)/3
(15100 + 14415 + 14283)/3
144 - 76
(11565 + 10689 + 10329)/3
1000000 / 17232
1000000 / 14573
(16330 + 16274 + 16030)/3
hex(ord(' '))
print(''.join(f'%{hex(ord(a))[2:]}' if a else a for a in input()))
https://stackoverflow.com/questions/7109143/what-characters-are-valid-in-a-url
print(''.join(f'%{hex(ord(a))[2:]}' if a else a for a in input()))
stackoverflow.com/questions/7109143/what-characters-are-valid-in-a-url
print(''.join(f'%{hex(ord(a))[2:]}' if a else a for a in input()))
questions/7109143/what-characters-are-valid-in-a-url
print(''.join(f'%{hex(ord(a))[2:]}' if a else a for a in input()))
7109143
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalnum() else a for a in input()))
%37%31%30%39%31%34%33
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalnum() else a for a in input()))
7109143
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalpha() else a for a in input()))
7109143
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalnum() else a for a in input()))
print(''.join(f'%{hex(ord(a))[2:]}' if a.isalnum() or a in ('_', '-', ' ', '.') else a for a in input()))
7109143
30 * 24
31 * 24
5 & 2
b = (a := 5)
b
a = [i for i in range(0, 9, -1)]
a
a = [i for i in range(9, 0, -1)]
a
2 ** 8
2 ** 16
2 ** 128
2 ** 64
1693022481538
a = {a : 1, b: 2}
a = {'a' : 1, 'b': 2}
for c in a:
	print(c)
sum([True, True, False])
import __hello__
import antigravity
import __hello__
a = 'abcdefghijklmnopqrstu'
a[0: 8 - 4]
a[: 8 - 4]
a.aj = 8
5 & 2
5 & 3
3 & 5
69 & 420
420 & 69
69 & 1
69 & 69
69 & 68
67 & 68
67 & 66
'ds ds'.split()
int(0h690000, 16)
int('0h690000', 16)
int('0x690000', 16)
hex(15258703)
type(7)
200 / 3
datetime.now().strftime("%d/%m/%Y %H:%M:%S")
from datetime import datetime
datetime.now().strftime("%d/%m/%Y %H:%M:%S")
from setuptools import setup
420 % 37
17 % 16
17 % 2
a = 0
for i in range(1001):
	if i % 3 == 0 or i % 5 == 0:
		a += i
a
a - 1000
999 * 999
'adsd'[::-1]
2 * 3 * 4 * 5 * 6 * 7 * 8 * 9 * 10
10 * 9 * 8 * 7 * 6
10 * 9 * 8 * 7
10 * 9 * 7 * 6
2 * 3 * 5 * 7
10 * 9 * 8 ( 7
10 * 9 * 8 * 7
10 * 9 * 4 * 7
2 * 3 * 5 * 7
from math import lcm
lcm(range(1, 20))
lcm(*range(1,20))
lcm(*range(1,21))
lcm(*range(1,210))
len('3578080812010005')
10 * 11 * 21 / 6
globals().update({l: __import__(l) for l in "re requests random sys string".split()}) or (lambda a, w: (lambda c: (lambda l:lambda k, i:l(l,k,i))(lambda f, i, t: print("Correct!" if t > 0 else "Fail...", "Word was:", c) if i == c or t <= 0 else (lambda z: print(t, "turns to guess a", len(c), "character word...") if i == "" else a.update({s: x for s, x in zip(i, z)}) or sys.stdout.write("\033[1A[\033[2K") and print(''.join([f"{x}{s}\033[0m" for s, x in zip(i, z)]), '\t', ''.join([f"{a[k]}{k}\033[0m" for k in a]), "turns:", t))([["\033[0;41m", "\033[30;42m", "\033[30;103m"][(1 if s == c[n] else 2) if s in c else 0] for n, s in enumerate(i)]) or f(f,(lambda y: lambda x: y(y,x))(lambda g, ip: ip if ip in w else g(g,input("\033[1A[\033[2K" if len(ip) > 0 else "").lower()[:5]))(""), t-1))("", 10))(random.choice(w)))({k: '\033[0;0m' for k in string.ascii_lowercase}, [x.strip().lower() for x in re.findall(r'^[a-zA-Z]{5}$', requests.get("https://www.mit.edu/~ecprice/wordlist.10000").text,re.MULTILINE)])
jsjs
djsdjsdjsjdsj
dsjdsjdjsjdjs
abcdefghij
globals().update({l: __import__(l) for l in "re requests random sys string".split()}) or (lambda a, w: (lambda c: (lambda l:lambda k, i:l(l,k,i))(lambda f, i, t: print("Correct!" if t > 0 else "Fail...", "Word was:", c) if i == c or t <= 0 else (lambda z: print(t, "turns to guess a", len(c), "character word...") if i == "" else a.update({s: x for s, x in zip(i, z)}) or sys.stdout.write("\033[1A[\033[2K") and print(''.join([f"{x}{s}\033[0m" for s, x in zip(i, z)]), '\t', ''.join([f"{a[k]}{k}\033[0m" for k in a]), "turns:", t))([["\033[0;41m", "\033[30;42m", "\033[30;103m"][(1 if s == c[n] else 2) if s in c else 0] for n, s in enumerate(i)]) or f(f,(lambda y: lambda x: y(y,x))(lambda g, ip: ip if ip in w else g(g,input("\033[1A[\033[2K" if len(ip) > 0 else "").lower()[:5]))(""), t-1))("", 10))(random.choice(w)))({k: '\033[0;0m' for k in string.ascii_lowercase}, [x.strip().lower() for x in re.findall(r'^[a-zA-Z]{5}$', requests.get("https://www.mit.edu/~ecprice/wordlist.10000").text,re.MULTILINE)])
abcdefghij
'a' > 'A'
'a' > 'B'
'a' > 'Z'
ord('a')
ord('Z')
'x' * 0
'x' * 2
'' + ''
169 + 169
